{
  pkgs,
  lib,
  config,
  options,
  my,
  ...
}:
with lib;
with my;
let
  cfp = config.modules.shell;
  cfg = cfp.fish;
  fishIndent =
    name: text:
    pkgs.runCommand name {
      nativeBuildInputs = [ cfg.package ];
      inherit text;
      passAsFile = [ "text" ];
    } "env HOME=$(mktemp -d) fish_indent < $textPath > $out";
in
{
  options.modules.shell.fish = {
    enable = mkEnableOption "Whether to use fish";

    rcInit = mkOpt' types.lines "" "Init fish shell";
    prevInit = mkOpt' types.lines "" "Init fish prevInit";
    loginInit = mkOpt' types.lines "" "Init fish login";
    extraRc = mkOpt' types.lines "" "extra fish";

    package = mkPackageOption pkgs "fish" { };
    plugins = mkOption {
      type = types.listOf types.package;
      default = [ ];
      example = literalExpression "[pkgs.fishPlugins.foreign-env]";
    };
  };
  config = mkIf cfg.enable (mkMerge [
    {
      modules.shell.fish.plugins = [
        pkgs.fishPlugins.foreign-env
        pkgs.unstable.fishPlugins.fisher
        pkgs.fishPlugins.done
        # NOTE: 某些补全使用 autopair 存在 bug
        # pkgs.fishPlugins.autopair
      ];
      home = {
        packages = [ cfg.package ];
        file = {
          ".cache/fish/env.fish".source = fishIndent "env.fish" ''
            # -*- mode: fish; -*-
            # This file is autogenerated, do not edit it!
            ${concatStringsSep "\n" (
              mapAttrsToList (
                k: v:
                (
                  if k == "PATH" then
                    concatMapStringsSep "\n" (x: "fish_add_path -g -P -p ${x} || true") v
                  else
                    (
                      if builtins.isList v then
                        ''
                          if set -q ${k}
                              set -gx ${k} ${concatMapStringsSep " " builtins.toString v} ${builtins.toString "\$${k}"}
                          else
                              set -gx ${k} ${concatMapStringsSep " " builtins.toString v}
                          end
                        ''
                      else
                        "set -gx ${k} ${v}"
                    )
                )
              ) cfp.env
            )}
            ${cfg.prevInit}
          '';
          ".cache/fish/login.fish".source = fishIndent "login.fish" cfg.loginInit;
          ".cache/fish/interactive.fish".source = fishIndent "interactive.fish" ''
            ${concatStringsSep "\n" (mapAttrsToList (k: v: "alias ${k} ${escapeShellArg v}") cfp.aliases)}
            ${cfg.rcInit}
          '';
          ".cache/fish/extra.fish".source = fishIndent "extra.fish" cfg.extraRc;
        };
      };
    }
    (mkIf config.home.useos { home.packages = cfg.plugins; })
    (mkIf (!config.home.useos) {
      home = mkMerge [
        {
          # TODO: fenv source
          file.".cache/fish/preEnv.fish".source = fishIndent "preEnv.fish" ''
            fenv source ${escapeShellArg "${config.home.profileDirectory}/etc/profile.d/hm-session-vars.sh"}
          '';
        }
        # copy from https://github.com/nix-community/home-manager/blob/5ec753a1fc4454df9285d8b3ec0809234defb975/modules/programs/fish.nix#L536
        (mkIf (length cfg.plugins > 0) {
          configFile = mkMerge (
            map (plugin: {
              "fish/conf.d/plugin-${plugin.name}.fish".source = fishIndent "${plugin.name}.fish" ''
                # Plugin ${plugin.name}
                set -l plugin_dir ${plugin}
                # set paths to import plugin components
                if test -d $plugin_dir/share/fish/vendor_functions.d
                  set fish_function_path $fish_function_path[1] $plugin_dir/share/fish/vendor_functions.d $fish_function_path[2..-1]
                end

                if test -d $plugin_dir/share/fish/vendor_completions.d
                  set fish_complete_path $fish_function_path[1] $plugin_dir/share/fish/vendor_completions.d $fish_complete_path[2..-1]
                end

                if test -d $plugin_dir/share/fish/vendor_conf.d
                  for f in $plugin_dir/share/fish/vendor_conf.d/*.fish
                    source $f
                  end
                end
              '';
            }) cfg.plugins
          );
        })
      ];
    })
  ]);
}
