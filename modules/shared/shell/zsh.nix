{
  pkgs,
  lib,
  config,
  options,
  my,
  ...
}:
with lib;
with my;
let
  cfp = config.modules.shell;
  cfg = cfp.zsh;
  getLastFunction = str: last (splitString "/" str);
  configDir = my.dotfiles.config;
  plFn =
    ext: l:
    (
      let
        _resultFn =
          if ext == "completions" then
            x: "${configDir}/${x}/_${x}"
          else
            x: "${configDir}/${x}/${x}.${ext}.zsh";
      in
      map (
        x:
        if hasPrefix "/" x then
          x
        else if hasInfix "/" x then
          "${configDir}/${x}"
        else
          _resultFn x
      ) l
    );
  baseFunction =
    l: path:
    concatMapAttrs (n: v: { "${n}".source = v; }) (
      builtins.listToAttrs (
        map (value: {
          inherit value;
          name = "zsh/${path}/${getLastFunction value}";
        }) l
      )
    );
in
{
  options.modules.shell.zsh = with types; {
    enable = mkBoolOpt false;
    rcInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
      $XDG_CONFIG_HOME/zsh/.zshrc
    '';
    envInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshenv and sourced
      by $XDG_CONFIG_HOME/zsh/.zshenv
    '';
    prevInit = mkOpt' lines "" "zshrc pre";
    envFiles = mkOptA (listOf (either str path)) [ ] (plFn "env");
    cmpFiles = mkOptA (listOf (either str path)) [ ] (plFn "completions");
    pluginFiles = mkOptA (listOf (either str path)) [ ] (plFn "plugin");
    package = mkPackageOption pkgs "zsh" { };
  };
  config = mkIf cfg.enable {
    env = {
      ZDOTDIR = ''''${XDG_CONFIG_HOME:-~/.config}/zsh'';
      ZSH_CACHE = ''''${XDG_CACHE_HOME:-~/.config}/zsh'';
    };

    modules.shell = {
      aliases.log = "lnav";
      zsh = {
        envInit = mkOrder 100 ''
          # This file is autogenerated, do not edit it!
          ${concatStringsSep "\n" (
            mapAttrsToList (
              n: v:
              (
                if (strings.toUpper "${n}") == "PATH" then
                  ''export path=(${concatMapStringsSep " " builtins.toString v} $path)''
                else
                  (
                    if builtins.isList v then
                      ''export ${n}=${concatMapStringsSep ":" builtins.toString v}''${n:+:}''${n}''
                    else
                      ''export ${n}="${v}"''
                  )
              )
            ) cfp.env
          )}
          ${optionalString (cfg.envFiles != [ ]) ''
            for i in "$ZDOTDIR/env/"*.env.zsh; do
              source $i
            done
          ''}
          ZINIT[HOME_DIR]="$XDG_DATA_HOME/zinit"
          ZINIT[ZCOMPDUMP_PATH]="$ZSH_CACHE/zcompdump"
          ZINIT[COMPINIT_OPTS]="-C"
        '';
        prevInit = mkOrder 100 (
          ''
            source ${pkgs.grc}/etc/grc.zsh
          ''
          + lib.optionalString (!config.modules.modern.enable) ''
            # FZF 配置
            FZF_DEFAULT_COMMAND="fd -H -I --type f"
            FZF_DEFAULT_OPTIONS="fd --height 50%"
            FZF_CTRL_T_COMMAND="fd -H -I --type f"
            FZF_CTRL_T_OPTS="--preview 'bat --color=always --plain --line-range=:200 {}'"
            FZF_ALT_C_COMMAND="fd -H -I --type d -E '.git*'"
            FZF_ALT_C_OPTS="--preview 'eza -T -L 2 {} | head -2000'"
            # FZF_CTRL_R_OPTS=""
            # source ${pkgs.fzf}/share/fzf/completion.zsh
            # source ${pkgs.fzf}/share/fzf/key-bindings.zsh
          ''
          + lib.optionalString (!cfp.vivid.enable) ''
            # colors 配置 if'[[ -z $LS_COLORS ]]'
            zice 0a atcone="dircolors -b LS_COLORS > c.zsh" \
              atpull='%atclone' pick='c.zsh' \
              trapd00r/LS_COLORS
          ''
        );
        rcInit = mkOrder 100 ''
          ${lib.optionalString (!cfp.atuin.enable) ''
            if [[ "$INSIDE_EMACS" != 'vterm' ]]; then
              _zt 0b light-mode for \
                compile'{hsmw-*,test/*}' \
                zdharma/history-search-multi-word \
                atload'bindkey -M viins "^n" history-substring-search-down;
                bindkey -M viins "^p" history-substring-search-up;
                bindkey "^[[A" history-substring-search-up;
                bindkey "^[[B" history-substring-search-down' \
                zsh-users/zsh-history-substring-search

              # history-search-multi-word config
              # # Color in which to highlight matched, searched text
              # (default bg=17 on 256-color terminals)
              zstyle ":history-search-multi-word" highlight-color "fg=yellow,bold"
              # Whether to perform syntax highlighting (default true)
              zstyle ":plugin:history-search-multi-word" synhl "yes"
              # Effect on active history entry. Try: standout, bold, bg=blue (default underline)
              zstyle ":plugin:history-search-multi-word" active "underline"
              # Whether to check paths for existence and mark with magenta (default true)
              zstyle ":plugin:history-search-multi-word" check-paths "yes"
              # Whether pressing Ctrl-C or ESC should clear entered query
              zstyle ":plugin:history-search-multi-word" clear-on-cancel "no"
            else
              bindkey '^r' fzf-history-widget
            fi
          ''}
          # alias 别名，设置
          ${concatStringsSep "\n" (
            mapAttrsToList (n: v: ''alias ${n}="${v}"'') (filterAttrs (_n: v: v != "") cfp.aliases)
          )}
        '';
      };
    };
    my.user = {
      init.clear-zsh = ''
        let zdotdir = "${config.modules.xdg.value.XDG_CONFIG_HOME}" | split row "/" | each  { |x| if ($x == "$HOME") { $env.HOME }  else { $x } }  | path join "zsh"
        try {
          ls ($zdotdir | path join "**/*.zwc" | into glob) | get name | rm ...$in
        } catch {
          log debug "No zwc files found that need to be cleaned up"
        }
      '';
      extra = optionalString (!config.home.useos) (
        mkOrder 5000 ''
          log debug $"If you use home-manager manage config."
          log debug $"Please add (ansi b)'export ZDOTDIR=''${XDG_CONFIG_HOME:-$HOME/.config}/zsh'(ansi n) to ~/.zshenv."
        ''
      );
    };
    home = {
      packages = [ cfg.package ];
      configFile =
        {
          "zsh".source = "${my.dotfiles.config}/zsh";
          "zsh".recursive = true;
          "zsh/cache/prev.zshrc".text = cfg.prevInit;
          "zsh/cache/extra.zshrc".text = cfg.rcInit;
          "zsh/cache/extra.zshenv".text = cfg.envInit;
          "zsh/.zshrc".text = ''
            source ${pkgs.unstable.zpmod}/share/zpmod/zpmod.plugin.zsh
            : ''${ZINIT_HOME:="''${XDG_DATA_HOME}/zinit/zinit.git"}
            ${lib.optionalString (!cfg.zinit.enable) ''
              [[ -d "''${ZINIT_HOME}" ]] || {
                mkdir -p $(dirname "''${ZINIT_HOME}")
                git clone --depth 1 https://github.com/zdharma-continuum/zinit.git "''${ZINIT_HOME}"
              }
            ''}
            ZINIT[BIN_DIR]="$ZINIT_HOME"
            _source "''${ZINIT_HOME}/zinit.zsh"

            _source "''${ZDOTDIR}/cache/prev.zshrc" \
              "''${ZDOTDIR}/zshrc.zsh" \
              "''${ZDOTDIR}/cache/extra.zshrc" \
              "''${HOME}/.zshrc_local"
            alias vish="''${EDITOR:-vim} ~/.zshrc_local"
          '';
        }
        // (baseFunction cfg.cmpFiles "completions")
        // (baseFunction cfg.pluginFiles "plugins")
        // (baseFunction cfg.envFiles "env");
    };
  };
}
